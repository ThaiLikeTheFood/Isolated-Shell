#include "types.h"
// Time Changed: 8-09... 
extern struct NODE* root;
extern struct NODE* cwd;


void mkdir(char pathName[]) {
    if (strcmp(pathName, "/") == 0) {
        printf("MKDIR ERROR: no path provided\n");
        return;
    }

    char baseName[64];
    char dirName[64];

    struct NODE* parentPtr = splitPath(pathName, baseName, dirName);

    if (parentPtr == NULL) {
       
        return;
    }

   
    struct NODE* child = parentPtr->childPtr;
    while (child != NULL) {
        if (strcmp(child->name, baseName) == 0 && child->fileType == 'D') {
           
            printf("MKDIR ERROR: directory %s already exists\n", baseName);
            return;
        }
        child = child->siblingPtr;
    }

    
    struct NODE* newNode = (struct NODE*)malloc(sizeof(struct NODE));
    strcpy(newNode->name, baseName);
    newNode->fileType = 'D';
    newNode->parentPtr = parentPtr;
    newNode->childPtr = NULL;
    newNode->siblingPtr = NULL;

    
    if (parentPtr->childPtr == NULL) {
        
        parentPtr->childPtr = newNode;
    } else {
     
        struct NODE* lastSibling = parentPtr->childPtr;
        while (lastSibling->siblingPtr != NULL) {
            lastSibling = lastSibling->siblingPtr;
        }
        lastSibling->siblingPtr = newNode;
    }

   
    printf("MKDIR SUCCESS: node %s successfully created\n", pathName);

    return;
}


struct NODE* splitPath(char* pathName, char* baseName, char* dirName) {
   
    if (strcmp(pathName, "/") == 0) {
        strcpy(dirName, "/");
        strcpy(baseName, "");
    } else {
        char* lastSlash = strrchr(pathName, '/');
        if (lastSlash == NULL) {
            
            strcpy(dirName, "");
            strcpy(baseName, pathName);
        } else if (lastSlash == pathName) {
            
            strcpy(dirName, "/");
            strcpy(baseName, pathName + 1);
        } else {
            
            int dirLength = lastSlash - pathName; 
            strncpy(dirName, pathName, dirLength);
            dirName[dirLength] = '\0'; 
            strcpy(baseName, lastSlash + 1);
        }
    }

    
    struct NODE* currentPtr;

    if (dirName[0] == '/') {
        
        currentPtr = root;
    } else {
       
        currentPtr = cwd;
    }

    if (strcmp(dirName, "") == 0 || strcmp(dirName, "/") == 0) {
        
    } else {

        char dirCopy[64];
        strcpy(dirCopy, dirName);

        char* token;
        if (dirName[0] == '/') {
            token = strtok(dirCopy + 1, "/");
        } else {
            token = strtok(dirCopy, "/");
        }

        while (token != NULL) {
            struct NODE* child = currentPtr->childPtr;
            int found = 0;
            while (child != NULL) {
                if (strcmp(child->name, token) == 0 && child->fileType == 'D') {
                    currentPtr = child;
                    found = 1;
                    break;
                }
                child = child->siblingPtr;
            }
            if (!found) {
                printf("ERROR: directory %s does not exist\n", token);
                return NULL;
            }
            token = strtok(NULL, "/");
        }
    }

    return currentPtr;
}
